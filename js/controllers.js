// Generated by CoffeeScript 1.6.1
(function() {
  var pantherControllers;

  pantherControllers = angular.module('pantherControllers', ['pantherServices', 'ngRoute', 'ui.router']);

  pantherControllers.controller('productsController', [
    '$scope', '$state', '$stateParams', 'Product', 'Taxonomy', 'Defaults', function($scope, $state, $stateParams, Product, Taxonomy, Defaults) {
      $scope.root = Defaults.root;
      return Product.find($stateParams.id).$promise.then(function(response) {
        return angular.forEach(response.variants, function(variant) {
          if (variant.is_master) {
            return $scope.product = variant;
          }
        });
      });
    }
  ]);

  pantherControllers.controller('taxonomiesController', [
    '$scope', '$state', '$stateParams', 'Taxonomy', 'Defaults', function($scope, $state, $stateParams, Taxonomy, Defaults) {
      var permalink;
      $scope.root = Defaults.root;
      permalink = $stateParams.taxonomy;
      return Taxonomy.findByPermalink(permalink).then(function(response) {
        var taxonomy;
        taxonomy = response;
        $scope.title = taxonomy.name;
        return $scope.taxons = taxonomy.taxons;
      });
    }
  ]);

  pantherControllers.controller('taxonsController', [
    '$scope', '$state', '$stateParams', 'Taxon', 'Defaults', function($scope, $state, $stateParams, Taxon, Defaults) {
      var permalink;
      $scope.root = Defaults.root;
      $scope.products_path = Defaults.products_path;
      permalink = $stateParams.taxonomy + '/' + $stateParams.taxon;
      return Taxon.findByPermalink(permalink).then(function(response) {
        var taxon;
        taxon = response;
        $scope.title = taxon.name;
        return Taxon.listProducts(taxon.id).$promise.then(function(response) {
          return $scope.products = response.products;
        });
      });
    }
  ]);

  pantherControllers.controller('storeView', [
    '$scope', '$state', '$stateParams', 'Taxonomy', 'Defaults', function($scope, $state, $stateParams, Taxonomy, Defaults) {
      $scope.store_path = Defaults.store_path;
      return Taxonomy.taxonomies_with_meta().$promise.then(function(response) {
        return $scope.taxonomies = response.taxonomies;
      });
    }
  ]);

}).call(this);
