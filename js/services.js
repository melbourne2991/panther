// Generated by CoffeeScript 1.6.1
(function() {
  var sprangularServices;

  sprangularServices = angular.module('sprangularServices', ['ngResource']);

  sprangularServices.service('Defaults', function() {
    var root, store_root;
    root = 'http://0.0.0.0:3000/#';
    store_root = root + '';
    return {
      api_url: "http://0.0.0.0:3000/api/",
      root: root,
      store_root: store_root,
      store_path: store_root + '/',
      products_path: store_root + '/products/'
    };
  });

  sprangularServices.factory('Product', function($resource, Defaults) {
    var Product;
    return Product = (function() {

      function Product() {
        this.service = $resource(Defaults.api_url + 'products/:id', {
          id: '@id'
        });
      }

      Product.products_with_meta = function() {
        var service;
        service = $resource(Defaults.api_url + 'products');
        return service.get();
      };

      Product.find = function(id) {
        var service;
        service = $resource(Defaults.api_url + 'products/:id', {
          id: id
        });
        return service.get();
      };

      return Product;

    })();
  });

  sprangularServices.factory('Taxonomy', function($resource, $http, Defaults) {
    var Taxonomy;
    return Taxonomy = (function() {

      function Taxonomy() {
        this.service = $resource(Defaults.api_url + 'taxonomies/:id', {
          id: '@id'
        });
      }

      Taxonomy.taxonomies_with_meta = function() {
        var service;
        service = $resource(Defaults.api_url + 'taxonomies');
        return service.get();
      };

      Taxonomy.find = function(id) {
        var service;
        if (id.length > 1) {
          service = $resource(Defaults.api_url + 'taxonomies/' + id[0] + '/taxons/' + id[1]);
        } else {
          service = $resource(Defaults.api_url + 'taxonomies/' + id[0]);
        }
        return service.get();
      };

      Taxonomy.findByPermalink = function(permalink) {
        return this.taxonomies_with_meta().$promise.then(function(response) {
          var current_taxonomy;
          current_taxonomy = null;
          angular.forEach(response.taxonomies, function(taxonomy) {
            taxonomy = taxonomy.root;
            if (taxonomy.permalink === permalink) {
              return current_taxonomy = taxonomy;
            }
          });
          return current_taxonomy;
        });
      };

      return Taxonomy;

    })();
  });

  sprangularServices.factory('Taxon', function($resource, $http, Defaults) {
    var Taxon;
    return Taxon = (function() {

      function Taxon() {
        this.service = $resource(Defaults.api_url + 'taxons/:id', {
          id: '@id'
        });
      }

      Taxon.taxons_with_meta = function() {
        var service;
        service = $resource(Defaults.api_url + 'taxons');
        return service.get();
      };

      Taxon.findByPermalink = function(permalink) {
        return this.taxons_with_meta().$promise.then(function(response) {
          var current_taxon;
          current_taxon = null;
          console.log(response);
          console.log(permalink);
          angular.forEach(response.taxons, function(taxon) {
            if (taxon.permalink === permalink) {
              return current_taxon = taxon;
            }
          });
          return current_taxon;
        });
      };

      Taxon.listProducts = function(taxon_id) {
        var service;
        service = $resource(Defaults.api_url + 'products?q[classifications_taxon_id_in]=' + taxon_id);
        return service.get();
      };

      return Taxon;

    })();
  });

}).call(this);
